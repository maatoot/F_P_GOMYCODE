# -*- coding: utf-8 -*-
"""GoMyCode_FP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CVWKNqcA9eGNGjHOVcNXc3GUzhE4wKXZ
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor


df = pd.read_csv("Cars.csv")
df.drop('Unnamed: 0' , axis=1,inplace=True)
df.info()

df.head(5)

df.Brand.value_counts()

print(df.Brand.value_counts())
sns.barplot(x = df["Brand"], y = df["Price"] , palette='viridis')

print(df.Engine.value_counts())
sns.barplot(x = df["Engine"], y = df["Price"] , palette='viridis')

model_mapping = {
    '128': 0,
    '131': 1,
    'Accent': 2,
    'Avante': 3,
    'Aveo': 4,
    'Cruze': 5,
    'Elantra': 6,
    'Excel': 7,
    'I10': 8,
    'Lanos': 9,
    'Matrix': 10,
    'Optra': 11,
    'Punto': 12,
    'Shahin': 13,
    'Tipo': 14,
    'Tucson': 15,
    'Uno': 16,
    'Verna': 17
}

# replace the Model values with numerical values
df['Model'] = df['Model'].replace(model_mapping)



def map_engine(engine):
    if engine == 'More than 3000 CC':
        return 3.0
    elif engine == '1600 CC':
        return 1.6
    elif engine == '1400 - 1500 CC' :
        return 1.5
    elif engine == '1000 - 1300 CC':
        return 1.2
    elif engine == '1800 - 2000 CC':
        return 2.0
    else:
        return 2.5

# replace the engine sizes with float values
df['Engine'] = df['Engine'].apply(map_engine)



def fuel_type(fuel):
    if fuel == 'Benzine' :
        return 1
    else:
        return 0

def brandtype(Brand):
    if Brand == 'Hyundai' :
        return 0
    elif Brand == 'Fiat' :
        return 1
    elif Brand == 'Chevrolet':
      return 2
    else:
      pass

def Transmission_type(Transmission):
  if Transmission == 'Manual':
    return 0
  else:
    return 1




def Transmission_type(Transmission):
  if Transmission == 'Manual':
    return 0
  else:
    return 1


df.Body = df.Body.map({'Sedan' : 0 , 'Hatchback' :1 , 'SUV' :2 , 'Coupe' :3 , 'Cabriolet':4})

df = df.drop(columns=['Gov', 'Year','Kilometers'])

df.Fuel = df.Fuel.apply(fuel_type)
df.Brand = df.Brand.apply(brandtype)
df.Transmission = df.Transmission.apply(Transmission_type)



# Convert the 'Color' column to numerical values by assigning each unique color a number starting from 0
color_mapping = {color: idx for idx, color in enumerate(df['Color'].unique())}
df['Color'] = df['Color'].map(color_mapping)



df['Price'] = df['Price'].apply(lambda e : round(e ,2))
df.sample(20)

sns.heatmap(df.corr(), annot=True, fmt='.2f')

X = df.drop('Price', axis=1)
y = df['Price']

from sklearn.preprocessing import StandardScaler,LabelEncoder
std = StandardScaler()
x = pd.DataFrame(std.fit_transform(X) , columns=X.columns)
x

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.35, random_state=42)


model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R2 Score: {r2:.2f}")